{"id":"../node_modules/ima/execution/Execution.js","dependencies":[{"name":"/Users/hasanlimajev/Desktop/js-constructor/package.json","includedInParent":true,"mtime":1704662260098},{"name":"/Users/hasanlimajev/Desktop/js-constructor/node_modules/ima/package.json","includedInParent":true,"mtime":1704662257674}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * Execution is an abstract class that defines a standard for executing jobs.\n * The execution can be either done in serial or in parallel way.\n *\n * When executing jobs in parallel an option should define how to deal with\n * a result of each individual job execution. One option would be to return the\n * result of a job that completes first. Second option is to return result of\n * all jobs once they're all complete.\n *\n * For serial execution you should define an option that affects how arguments\n * passed to the {@code execute} method are distributed. They could be either\n * supplied to each job individually (thus meaning one job's mutation won't\n * affect another job) or they could be supplied to the first job and then\n * piped through other jobs.\n *\n * @interface\n */\nclass Execution {\n  /**\n   * Adds a new job to be executed. The job is appended at the end of the\n   * list of current jobs therefore is executed last.\n   *\n   * @param {Array<function(): Promise>} jobs The jobs to be executed.\n   */\n  append() {}\n  /**\n   * Start executing collected jobs. In the end a {@code Promise} is returned\n   * with a resulting value. On the returned {@code Promise} a {@code catch}\n   * method can be called to prevent any unwanted interruption.\n   *\n   * @param {...any} args Arguments to be passed when executing jobs\n   * @returns {Promise}\n   */\n\n\n  execute() {}\n\n}\n\nexports.default = Execution;\n\ntypeof $IMA !== 'undefined' && $IMA !== null && $IMA.Loader && $IMA.Loader.register('ima/execution/Execution', [], function (_export, _context) {\n 'use strict';\n return {\n   setters: [],\n   execute: function () {\n     _export('default', exports.default);\n   }\n };\n});\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ima/execution/Execution.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ima/execution/Execution.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}}],"sources":{"../node_modules/ima/execution/Execution.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * Execution is an abstract class that defines a standard for executing jobs.\n * The execution can be either done in serial or in parallel way.\n *\n * When executing jobs in parallel an option should define how to deal with\n * a result of each individual job execution. One option would be to return the\n * result of a job that completes first. Second option is to return result of\n * all jobs once they're all complete.\n *\n * For serial execution you should define an option that affects how arguments\n * passed to the {@code execute} method are distributed. They could be either\n * supplied to each job individually (thus meaning one job's mutation won't\n * affect another job) or they could be supplied to the first job and then\n * piped through other jobs.\n *\n * @interface\n */\nclass Execution {\n  /**\n   * Adds a new job to be executed. The job is appended at the end of the\n   * list of current jobs therefore is executed last.\n   *\n   * @param {Array<function(): Promise>} jobs The jobs to be executed.\n   */\n  append() {}\n  /**\n   * Start executing collected jobs. In the end a {@code Promise} is returned\n   * with a resulting value. On the returned {@code Promise} a {@code catch}\n   * method can be called to prevent any unwanted interruption.\n   *\n   * @param {...any} args Arguments to be passed when executing jobs\n   * @returns {Promise}\n   */\n\n\n  execute() {}\n\n}\n\nexports.default = Execution;\n\ntypeof $IMA !== 'undefined' && $IMA !== null && $IMA.Loader && $IMA.Loader.register('ima/execution/Execution', [], function (_export, _context) {\n 'use strict';\n return {\n   setters: [],\n   execute: function () {\n     _export('default', exports.default);\n   }\n };\n});\n"},"lineCount":57}},"error":null,"hash":"45284709769fac3ff943dd3ac31bae52","cacheData":{"env":{}}}